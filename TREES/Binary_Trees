#include<stdio.h>
#include<stdlib.h>
int c=0;
struct node
{
    int data;
    struct node *left,*right;
};


struct node *create()
{
    int x;
    struct node *tmp;
    tmp=(struct node*)malloc(sizeof(struct node));
    printf("\nEnter the data= ");
    scanf("%d",&x);
    if(x==-1)
    {
        return 0;//the process will stop here after this condition will be true.
    }
    tmp->data=x;
    printf("\nEnter left child of %d",x);
    tmp->left=create();
    printf("\nEnter the right child of %d",x);
    tmp->right=create();
    return tmp;
}

void preorder(struct node *start)
{
    if(start==0)
    {
        return;
    }
    printf("%d",start->data);
    preorder(start->left);
    preorder(start->right);
}

void inorder(struct node *start)

{
    if(start==0)
    {
        return;
    }
    inorder(start->left);
    printf("%d",start->data);
    inorder(start->right);
}

void postorder(struct node *start)

{
    if(start==0)
    {
        return;
    }
    postorder(start->left);
    postorder(start->right);
    printf("%d",start->data);
}

struct node *searching(struct node *root,struct node *search)
{
    struct node *tmp1;
  if(root==0)
  {
      return;
  }
  tmp1=root;//100
  if(tmp1->data==search)
  
  {
     printf("\nElement is found");
     
     
  }
  searching(tmp1->left,search);
  searching(tmp1->right,search);
}
struct node *maximum(struct node *root)

{
   int max=root->data;
   struct node *tmp1;
   
   if(root==0)
   {
       return;
   }
  
   if(max<root->data)
   {
       max=root->data;
   }
   else
   {
       maximum(tmp1->left);
       maximum(tmp1->right);
   }
   
   
   
}
void main()
{
    struct node *start,*tmp1,*search;
    int ch;
    while(1)
    {
    printf("\n1>Create Binary tree\n2>Display elements in Preorder\n3>Display elements in Inorder\n4>Display elements in Postorder\n5>Searching the elements");
    printf("\nEnter your Choices: ");
    scanf("%d",&ch);
    switch(ch)
    {
         
        case 1: start=0;
                start=create();
                break;
                
        case 2:preorder(start);
        break;
       
        case 3:inorder(start);
        break;
        
        case 4: postorder(start);
        break;
   
       case 5:printf("\nEnter the searching elements: ");
             scanf("%d",&search);
             start=searching(start,search);
             printf("%d",start);
             break;
    
       case 6: int max;
      
       max=maximum(start);
       printf("Maximum value in binary tree is=%d",max);
       
              break;
    
    
   
    
   
    }
   
    
}
}
